import bool;

let -Sum : * -> * -> *
  = \A B. (b : Bool) ** (if b B A);
let Left : {-A -B : *} -> A -> Sum A B = \x. (False, x);
let Right : {-A -B : *} -> B -> Sum A B = \x. (True, x);

let elimSum
  : {-A -B : *} -> (-P : Sum A B -> *) -> ((y : A) -> P (Left y)) -> ((y : B) -> P (Right y)) -> (x : Sum A B) -> P x
  = \{A} {B} P l r x. (elimBool (\b. (y : if b B A) -> P (b, y)) r l x._1) x._2;

let caseSum
  : {-A -B -R : *} -> Sum A B -> (A -> R) -> (B -> R) -> R
  = \{A} {B} {R} x l r. elimSum (\_. R) l r x;

let sum
  : {-A -B -R : *} -> (A -> R) -> (B -> R) -> Sum A B -> R
  = \l r x. caseSum x l r;

[Sum, @Left, @Right, @elimSum, @caseSum, @sum]
:
(-Sum : * -> * -> *)
**
(Left : {-A -B : *} -> A -> Sum A B)
**
(Right : {-A -B : *} -> B -> Sum A B)
**
(elimSum : {-A -B : *} -> (-P : Sum A B -> *) -> ((y : A) -> P (Left y)) -> ((y : B) -> P (Right y)) -> (x : Sum A B) -> P x)
**
(caseSum : {-A -B -R : *} -> Sum A B -> (A -> R) -> (B -> R) -> R)
**
(sum : {-A -B -R : *} -> (A -> R) -> (B -> R) -> Sum A B -> R)
**
()
