let rewrite
  : {-A : *} -> {-a -b : A} -> (-P : A -> *) -> Eq a b -> P a -> P b
  = \P p. elimEq (\x y _. P x -> P y) (\q. q) p;

let cast
  : {-A -B : *} -> Eq A B -> A -> B
  = \p x. rewrite (\x. x) p x;

let sym
  : {-A : *} -> {-a -b : A} -> Eq a b -> Eq b a
  = \{A} p. elimEq {A} (\x y q. Eq y x) Refl p;

let trans
  : {-A : *} -> {-a -b -c : A} -> Eq a b -> Eq b c -> Eq a c
  = \{A} {a} p q. rewrite (\x. Eq a x) q p;

let cong
  : {-A -B : *} -> {-f : A -> B} -> {-a -b : A} -> Eq a b -> Eq (f a) (f b)
  = \{A} {B} {f} {a} p. rewrite (\x. Eq (f a) (f x)) p Refl;

let axiomK
  : {-A : *} -> {-x : A} -> {p : Eq x x} -> Eq p Refl
  = Refl;

[rewrite, cast, sym, trans, cong, axiomK]
