mod {
  def 0 Sigma : (A : Type) -> (A -> Type) -> Type
    = \A B. (x : A) ** B x

  def fst
    : {0 A : Type} -> {0 B : A -> Type} -> ((x : A) ** B x) -> A
    = \{A} {B} s. elimSigma (\_. A) s \x y. x

  def snd
    : {0 A : Type} -> {0 B : A -> Type} -> (s : (x : A) ** B x) -> B (fst {A} {B} s)
    = \{A} {B} s. elimSigma (\s. B (fst {A} {B} s)) s \x y. y
}
