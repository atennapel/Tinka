mod {
  def paraNat : {-A : *} -> Nat -> A -> (Nat -> A -> A) -> A
    = \{A} n z s. elimNat (\_. A) z s n
  def cataNat : {-A : *} -> Nat -> A -> (A -> A) -> A
    = \{A} n z s. elimNat (\_. A) z (\_. s) n
  def caseNat : {-A : *} -> Nat -> A -> (Nat -> A) -> A
    = \{A} n z s. elimNat (\_. A) z (\m _. s m) n

  def pred : Nat -> Nat = \n. caseNat n Z \m. m
  def add : Nat -> Nat -> Nat = \a b. cataNat a b S
  def mul : Nat -> Nat -> Nat = \a b. cataNat a Z (add b)
}
