mod {
  def 0 Bool = {0 A : Type} -> A -> A -> A
  def True : Bool = \{A} t f. t
  def False : Bool = \{A} t f. f

  def if : {0 A : Type} -> Bool -> A -> A -> A
    = \{A} c a b. c {A} a b

  def not : Bool -> Bool
    = \b. if {Bool} b False True

  def and : Bool -> Bool -> Bool
    = \a b. if {Bool} a b False
  def or : Bool -> Bool -> Bool
    = \a b. if {Bool} a True b

  def eq : Bool -> Bool -> Bool
    = \a b. if {Bool} a b (not b)
  def neq : Bool -> Bool -> Bool
    = \a b. not (eq a b)

  def xor : Bool -> Bool -> Bool = neq
}
