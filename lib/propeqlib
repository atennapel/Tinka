mod {
  def rewrite
    : {0 A : Type} -> {0 a b : A} -> {0 P : A -> Type} -> (a = b) -> P a -> P b
    = \{A} {a} {b} {P} p. elimPropEq (\x y q. P x -> P y) p \_ q. q

  def cast
    : {0 A B : Type} -> (A = B) -> A -> B
    = \{A} {B} p x. rewrite {Type} {A} {B} {\x. x} p x

  def sym
    : {0 A : Type} -> {0 a b : A} -> (a = b) -> (b = a)
    = \{A} {a} {b} p. elimPropEq (\x y q. y = x) p \_. Refl

  def trans
    : {0 A : Type} -> {0 a b c : A} -> (a = b) -> (b = c) -> (a = c)
    = \{A} {a} {b} {c} p q. rewrite {A} {b} {c} {\x. a = x} q p

  def lift
    : {0 A B : Type} -> {0 f : A -> B} -> {0 a b : A} -> (a = b) -> (f a = f b)
    = \{A} {B} {f} {a} {b} p. rewrite {A} {a} {b} {\x. f a = f x} p (Refl {B} {f a})
}
