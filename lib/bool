import lib/eq;

let if : {-A : *} -> Bool -> A -> A -> A
  = \{A} b t f. elimBool (\_. A) t f b;
let not : Bool -> Bool = \b. if b False True;
let and : Bool -> Bool -> Bool
  = \a b. if a b False;
let or : Bool -> Bool -> Bool
  = \a b. if a True b;
let eqBool : Bool -> Bool -> Bool
  = \a b. if a b (not b);
let neqBool : Bool -> Bool -> Bool
  = \a b. not (eqBool a b);

let -liftBool : Bool -> * = \b. if b () Void;

let trueNeqFalse : Neq True False
  = \eq. rewrite liftBool eq [];

[if, not, and, or, eqBool, neqBool, liftBool, trueNeqFalse]
